"""
算术运算符
"""
# x = 5
# y = 2
# print(x+y)
# print(x-y)
# print(x*y)
# print(x/y)
# print(x % y)
# print(x**y)
# print(x//y)

"""
赋值运算符,这里需要注意，print函数的参数应该是一个表达式，而不是一个语句。因此直接将复制表达式放在print中进行打印会报错
"""
# print(x=3)
# print(x += 3)     这两种写法会报错

# x = 3
# print(x)
# x = 5
# x += 3
# print(x)
# x = 5
# x -= 3
# print(x)
# x = 5
# x *= 3
# print(x)
# x = 5
# x /= 3
# print(x)
# x = 5
# x %= 3
# print(x)
# x = 5
# x //= 3
# print(x)
# x = 5
# x **= 3
# print(x)

"""
需要注意的是，因负数在计算机中是以补码的方式参与运算，所以对负数进行位操作运算时，需要注意符号位。
该点，有个概念先，以后遇到再学习记忆
"""
# x = 5
# x &= 3  # &按位与：只有当两个操作数的对应位都为1时，结果的对应位才为1，否则为0。
# print(x)
# x = 5
# x ^= 3  # ^按位异或：对应位相同则结果为0，对应位不同则结果为1。
# print(x)
# x = 5
# x |= 3  # |按位或：只要对应位有一个为1，则结果为1；如果两个对应位都是0，则结果为0。
# print(x)

"""
>>= 按位右移赋值:将右操作数的值右移并将结果赋给左操作数.
<<= 按位左移赋值:将一个整数的所有位向左移动指定的位数，右边补零。

按位左移操作对负数的处理与对正数相同：所有位向左移动，右边补零。值得注意的是，左移操作不会改变数值的符号。
按位右移操作对负数的处理需要注意符号位的保持。在大多数编程语言中，右移负数时，最高位（符号位）会填充 1（算术右移），保持负数的性质。
"""
# x = 5
# x >>= 2
# print(x)

# x = 5
# x <<= 2
# print(x)

"""
比较运算符
==
!=
>
<
>=
<=
"""
# x, y = 3, 5
# print(x == y)
# print(x != y)
# print(x > y)
# print(x < y)
# print(x >= y)
# print(x <= y)

"""
逻辑运算符
and
or
not
"""
# x, y = 2, 5
# print(x > 3 and y < 10)
# print(x > 3 or y < 10)
# print(not (x > 3 and y < 10))

"""
赋值运算符
&
|
^
~ 
>>
<<
"""
# ~按位取反运算符: 它对整数的每一位执行取反操作，将每一位的 0 变为 1，1 变为 0。结果是输入整数的二进制补码的按位取反。
# 具体来说，如果对一个数 x 应用按位取反运算符 ~，则结果为 -(x+1)。
# x = ~5
# print(x)

"""
身份运算符
is
is not
"""

# x, y = 3, 5
# print(x is y)
# print(x is not y)

"""
成员运算符
in 
not in
"""
# x = 3
# y = [5]
# print(x in y)
# print(x not in y)
